name: Devcontainer & Scripts Security and Best Practices

on:
  pull_request:
    paths:
      - "devcontainer.json"
      - "Dockerfile"
      - "initial_run.sh"
      - "scripts/**"
  workflow_dispatch: {}

# Minimal permissions required
permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: devcontainer-security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate devcontainer, Dockerfile and scripts
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      result: ${{ steps.collect.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create a check run (marking start)
        id: create_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Devcontainer & Scripts checks",
              head_sha: context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha,
              status: "in_progress",
              started_at: new Date().toISOString()
            });
            core.setOutput('check_run_id', response.data.id);

      - name: Validate devcontainer.json
        id: devcontainer_validate
        uses: devcontainers/ci@v0
        with:
          validate: "true"

      - name: Run hadolint on Dockerfile
        id: hadolint
        uses: hadolint/hadolint-action@v2
        with:
          dockerfile: Dockerfile

      - name: Install shellcheck & shfmt
        run: |
          sudo apt-get update -y
          sudo apt-get install -y shellcheck
          # install shfmt: use binary for reliability
          SHFMT_VERSION="v3.8.0"
          curl -sL "https://github.com/mvdan/sh/releases/download/${SHFMT_VERSION}/shfmt_${SHFMT_VERSION#v}_linux_amd64" -o /usr/local/bin/shfmt
          sudo chmod +x /usr/local/bin/shfmt

      - name: ShellCheck scripts
        id: shellcheck
        run: |
          set -euo pipefail
          files=$(git ls-files -- 'scripts/**' 'initial_run.sh' || true)
          if [ -z "$files" ]; then
            echo "No shell scripts to check"
            echo "shellcheck=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Checking: $files"
          if shellcheck -x $files; then
            echo "shellcheck=success" >> $GITHUB_OUTPUT
          else
            echo "shellcheck=failure" >> $GITHUB_OUTPUT
            # do not exit here; collection will mark overall result
          fi

      - name: shfmt --check
        id: shfmt
        run: |
          set -euo pipefail
          files=$(git ls-files -- 'scripts/**' 'initial_run.sh' || true)
          if [ -z "$files" ]; then
            echo "No shell scripts to format-check"
            echo "shfmt=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          # list files that differ
          DIFF=$(shfmt -l $files || true)
          if [ -n "$DIFF" ]; then
            echo "shfmt=failure" >> $GITHUB_OUTPUT
            echo "Files with formatting issues:"
            echo "$DIFF"
          else
            echo "shfmt=success" >> $GITHUB_OUTPUT
          fi

      - name: Collect results
        id: collect
        run: |
          set -euo pipefail
          STATUS="success"
          # If any step reported failure, mark failure
          if [ "${{ steps.devcontainer_validate.outcome }}" != "success" ]; then STATUS="failure"; fi
          if [ "${{ steps.hadolint.outcome }}" != "success" ]; then STATUS="failure"; fi
          if [ "${{ steps.shellcheck.outcome }}" != "success" ]; then STATUS="failure"; fi
          if [ "${{ steps.shfmt.outcome }}" != "success" ]; then STATUS="failure"; fi
          echo "result=$STATUS" >> $GITHUB_OUTPUT

      - name: Update check run (complete)
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checkRunId = parseInt('${{ steps.create_check.outputs.check_run_id }}', 10);
            const conclusion = '${{ steps.collect.outputs.result }}' === 'success' ? 'success' : 'failure';
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRunId,
              completed_at: new Date().toISOString(),
              conclusion: conclusion,
              output: {
                title: "Devcontainer & Scripts checks",
                summary: `Checks finished with conclusion: ${conclusion}`,
                text: [
                  `devcontainer.json validation: ${{ steps.devcontainer_validate.outcome }}`,
                  `Dockerfile hadolint: ${{ steps.hadolint.outcome }}`,
                  `shellcheck: ${{ steps.shellcheck.outcome }}`,
                  `shfmt: ${{ steps.shfmt.outcome }}`
                ].join('\n')
              }
            });

  annotate:
    name: Annotate PR and ensure final status
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    if: always()
    steps:
      - name: Post PR comment with summary (idempotent)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request || {};
            if (!pr.number) {
              console.log('No PR context to annotate.');
              return;
            }
            const conclusion = '${{ needs.validate.outputs.result }}' || 'failure';
            const body = `Automated Devcontainer & Scripts checks completed with status: **${conclusion}**

            - devcontainer.json validation: ${{ needs.validate.outputs.result }}
            - Dockerfile hadolint: see job logs
            - shellcheck: see job logs
            - shfmt: see job logs

            If any check failed, please review the job logs in the Actions tab.`;
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            const existing = comments.data.find(c => c.user && c.user.type === 'Bot' && c.body && c.body.includes('Automated Devcontainer & Scripts checks completed'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body
              });
            }

      - name: Final log
        run: 'echo "Workflow annotate step finished. Result: ${{ needs.validate.outputs.result }}"'
