name: Automated Bot Review

# Trigger when all checks are successful and PR is ready for review
on:
  pull_request:
    types:
      - ready_for_review
      - synchronize
  check_suite:
    types:
      - completed
  workflow_run:
    workflows: ["*"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  checks: read
  statuses: read

jobs:
  auto-review:
    name: Auto Review by Bot
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}

    # Only run on pull requests that are ready for review and not in draft mode
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context
          fetch-depth: 0

      - name: Validate and get PR number
        id: get-pr
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER_DIRECT: ${{ github.event.pull_request.number }}
          PR_DRAFT: ${{ github.event.pull_request.draft }}
          # Use environment variables to avoid code injection
          CHECK_SUITE_PRS: ${{ toJson(github.event.check_suite.pull_requests) }}
          WORKFLOW_RUN_PRS: ${{ toJson(github.event.workflow_run.pull_requests) }}
        run: |
          set -eu

          # Validate conditions based on event type
          case "$EVENT_NAME" in
            "pull_request")
              if [[ "$PR_DRAFT" == "true" ]]; then
                echo "Skipping draft PR"
                exit 0
              fi
              echo "pr_number=$PR_NUMBER_DIRECT" >> "$GITHUB_OUTPUT"
              ;;
            "check_suite"|"workflow_run")
              # Parse JSON to check if PRs exist
              if [[ "$EVENT_NAME" == "check_suite" ]]; then
                PRS_JSON="$CHECK_SUITE_PRS"
              else
                PRS_JSON="$WORKFLOW_RUN_PRS"
              fi
              
              # Check if PRs array is not empty
              if echo "$PRS_JSON" | jq -e '. | length > 0' > /dev/null; then
                PR_NUM=$(echo "$PRS_JSON" | jq -r '.[0].number')
                echo "pr_number=$PR_NUM" >> "$GITHUB_OUTPUT"
              else
                echo "No PRs associated with this event"
                exit 0
              fi
              ;;
          esac

      - name: Check all required checks status
        id: check-status
        if: steps.get-pr.outputs.pr_number
        shell: bash
        env:
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}
        run: |
          set -eu

          # Get PR details using GitHub CLI
          PR_DATA=$(gh pr view "$PR_NUMBER" --json state,isDraft,mergeable,statusCheckRollup)

          # Check if PR is still open and not draft
          STATE=$(echo "$PR_DATA" | jq -r '.state')
          IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')

          if [ "$STATE" != "OPEN" ]; then
            echo "PR is not open (state: $STATE), skipping review"
            echo "can_review=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$IS_DRAFT" = "true" ]; then
            echo "PR is in draft mode, skipping review"
            echo "can_review=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check status of all required checks
          STATUS_CHECKS=$(echo "$PR_DATA" | jq -r '.statusCheckRollup // []')
          TOTAL_CHECKS=$(echo "$STATUS_CHECKS" | jq 'length')

          echo "Found $TOTAL_CHECKS status checks"

          # If no checks or very few checks (like only this workflow), proceed with review
          if [ "$TOTAL_CHECKS" -le 1 ]; then
            echo "Few or no external status checks found, proceeding with review"
            echo "can_review=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # For repositories with multiple checks, verify they passed
          # Exclude this workflow from the check count to avoid circular dependency
          EXTERNAL_CHECKS=$(echo "$STATUS_CHECKS" | jq --arg workflow_name "Automated Bot Review" '[.[] | select(.context != $workflow_name and .context != "auto-review")]')
          EXTERNAL_TOTAL=$(echo "$EXTERNAL_CHECKS" | jq 'length')

          if [ "$EXTERNAL_TOTAL" -eq 0 ]; then
            echo "No external status checks found, proceeding with review"
            echo "can_review=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Count external checks that failed
          FAILED_CHECKS=$(echo "$EXTERNAL_CHECKS" | jq '[.[] | select(.conclusion != "SUCCESS" and .conclusion != "SKIPPED" and .conclusion != "NEUTRAL" and .conclusion != null)] | length')
          # Count external checks that are still running
          PENDING_CHECKS=$(echo "$EXTERNAL_CHECKS" | jq '[.[] | select(.status == "IN_PROGRESS" or .status == "QUEUED" or .status == "PENDING")] | length')

          echo "External checks: Total=$EXTERNAL_TOTAL, Failed=$FAILED_CHECKS, Pending=$PENDING_CHECKS"

          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "Some external checks have failed, skipping review"
            echo "can_review=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$PENDING_CHECKS" -gt 0 ]; then
            echo "Some external checks are still pending, skipping review for now"
            echo "can_review=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "All external checks have passed, proceeding with review"
          echo "can_review=true" >> "$GITHUB_OUTPUT"
      - name: Check if bot already reviewed
        id: check-reviewed
        if: steps.check-status.outputs.can_review == 'true'
        shell: bash
        env:
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}
        run: |
          set -eu

          # Dynamically determine the bot's username from the token
          BOT_USERNAME=$(gh api user --jq '.login')
          echo "Detected bot username: $BOT_USERNAME"

          # Get reviews from the bot
          REVIEWS=$(gh api "/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" --jq "[.[] | select(.user.login == \"$BOT_USERNAME\")] | length")

          echo "Found $REVIEWS previous reviews from $BOT_USERNAME"

          if [ "$REVIEWS" -gt 0 ]; then
            echo "Bot has already reviewed this PR"
            echo "already_reviewed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Bot has not reviewed this PR yet"
            echo "already_reviewed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Perform automated review
        if: |
          steps.check-status.outputs.can_review == 'true' &&
          steps.check-reviewed.outputs.already_reviewed == 'false'
        shell: bash
        env:
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}
        run: |
          set -eu

          # Get PR details for the review comment
          PR_DATA=$(gh pr view "$PR_NUMBER" --json title,author,headRefName,additions,deletions)
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          PR_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          ADDITIONS=$(echo "$PR_DATA" | jq -r '.additions')
          DELETIONS=$(echo "$PR_DATA" | jq -r '.deletions')

          # Create review comment
          REVIEW_BODY=$(cat <<EOF
          ## 🤖 Automated Bot Review

          **Status:** ✅ All checks passed

          ### Pull Request: $PR_TITLE

          ### Summary
          - **Author:** @$PR_AUTHOR
          - **Branch:** \`$PR_BRANCH\`
          - **Changes:** +$ADDITIONS / -$DELETIONS lines

          ### Automated Checks
          All required status checks have completed successfully. This PR is ready for human review.

          ### Next Steps
          - Code owner review is required from: **@jfheinrich-eu/maintainers**
          - Additional reviewers: **@Copilot**

          ---
          *This is an automated review. Please wait for human reviewers to approve before merging.*
          EOF
          )

          # Submit the review
          gh pr review "$PR_NUMBER" --approve --body "$REVIEW_BODY"

          echo "✅ Automated review submitted successfully"

      - name: Add review label
        if: |
          steps.check-status.outputs.can_review == 'true' &&
          steps.check-reviewed.outputs.already_reviewed == 'false'
        shell: bash
        env:
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}
        run: |
          set -eu

          # Add 'automated' label to indicate bot has reviewed
          # Using || true because label might already exist from a previous run
          gh pr edit "$PR_NUMBER" --add-label "automated" || true

          echo "✅ Added 'automated' label to PR"

      - name: Handle errors gracefully
        if: failure()
        shell: bash
        env:
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}
        run: |
          set -e

          # Only post comment if we have a PR number
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            ERROR_MESSAGE=$(cat <<EOF
          ## ⚠️ Automated Review Failed

          The automated bot review encountered an error. Please check the workflow logs for details.

          You can still proceed with manual review by the code owners and maintainers.
          EOF
          )

            gh pr comment "$PR_NUMBER" --body "$ERROR_MESSAGE" || true
          fi

          echo "⚠️ Workflow failed but error was handled gracefully"
